docker安装:
	curl -sSL https://get.docker.com/ | sh 

启动:
	service docker start
	
usermod -aG docker username
这样非root用户也能使用docker

docker run hello-world
docker -v
docker search tutorial
docker pull learn/tutorial 
docker run learn/tutorial echo "hello word"
docker run learn/tutorial apt-get install -y ping
docker ps -l //-n=2 最后创建的两个容器

docker run<=>docker create + docker start
docker stop
docker create ubuntu:14.04
docker rm 1bd40561d3de 
docker rm $(docker ps -a -q)//删除所有容器
docker rmi $(docker images | grep none | awk '{print $3}' | sort -r) #删除所有镜像

docker attach 778d0b719b68
为后台容器添加交互窗口

创建交互型容器
docker run -i -t --name=inspect_shell ubuntu /bin/bash // -i interactive -t terminal
创建后台型容器
docker run --name=daemon_while -d ubuntu /bin/sh -c "while true;do echo hello" //-d 开启Daemon模式。
	--restart=always
	--restart=1 退出码为1重启
	--restart=on-failure:5 退出码非0尝试重启5次

docker 保存镜像:
	docker commit 91 learn/ping 91为 docker 的镜像ID
	docker commit -m="message" --author="lj" 91 lj/mysql:v1 // repository/images:tag

获取docker的详细信息:
	docker inspect 778d0b719b68 //查看容器配置
	docker inspect --format='{{.Id}} {{.Name}}' 778d0b719b68 //json 显示特定值

当前镜像信息:
	docker images

docker发布:
	docker push learn/ping
	docker push arthur657834/ljtest //push到自己的docker仓库 rename your repository to <user>/<repo>
	
docker logs -f 778d0b719b68 --tail=5 -t
docker top 778d0b719b68
docker stats 778d0b719b68 //docker 资源使用状况

docker exec -d 778d0b719b68 touch /root/q.txt //在docker中执行命令
docker exec -t -i 778d0b719b68 /bin/bash //进入shell交互界面

导入导出镜像
docker export 778d0b719b68 > lj.rar
cat lj.rar | docker import - import:container // 或docker import url res:tag

docker save debian02 >/root/debian02.tar
docker load < debian02.tar

使用dockerfile创建(跟makefile差不多)
docker build -t lj/mysql:v1 .
docker build -t lj/mysql:v1 git地址 //docker build -t arthur657834/docker-desktop github.com/rogaha/docker-desktop
	onbuild:新镜像指定此镜像为父镜像时执行

docker tag 85d54f4ba0cc arthur657834/ljtest
修改REPOSITORY名

自动化构建：
hub.docker.org上新建repository(create automated repository)  关联github帐号下的docker,设置相关配置，然后当github上的代码更新之后会自动打包生成新的镜像

docker run -d -P training/webapp python app.py //-P 随机映射一个49000-49900的端口 -p 81:5000 指定映射端口 127.0.0.1:81:5000 127.0.0.1::5000

-v /webapp //创建数据卷并挂载到容器 docker inspect suspicious_hoover
docker run -v /webapp -d -P training/webapp python app.py // 宿主机的路径 /var/lib/docker/volumes/

-v `pwd`:/webapp //指定当前目录为webapp为挂载目录,绝对路径
docker run --name webapp -v `pwd`:/webapp -d -P training/webapp python app.py //-v `pwd`:/webapp:ro 只读
dockerfile不支持目录挂载

-v ~/test.txt:/test.txt //挂载文件

注意挂载之后的文件在容器及宿主机之间同步修改

docker run -d -v /dbdata --name dbdata training/postgres //创建数据卷容器

docker run -d --volumes-from=dbdata --name db1 training/postgres //引用数据卷,可以多次引用

docker run -d --volumes-from=db1 --name db2 training/postgres //级联引用

注意:引用的数据卷一旦声明，它的生命周期就跟它的容器(dbdat)无关了
删除数据卷:删除所有引用的容器，并在删除最后一个时加-v参数(docker rm -v db2)

备份数据卷:
docker run --volumes-from=dbdata -v $(pwd):/backup ubuntu tar cvf
原理:新建容器挂载数据卷,映射数据卷

恢复数据卷:
docker run --volumes-from=dbdata2 ubuntu tar cvf
docker run --volumes-from=dbdata2 -v $(pwd):/backup ubuntu tar xvf



容器连接:
docker run -d --name dbdata training/postgres
docker run --name web -d -P --link dbdata:db training/webapp python app.py


dbdata提供的服务:

1.环境变量
docker run --rm --name web2 --link dbdata:webdb training/webapp env

PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
HOSTNAME=e1f0147bbc90
WEBDB_PORT=tcp://172.17.0.2:5432
WEBDB_PORT_5432_TCP=tcp://172.17.0.2:5432
WEBDB_PORT_5432_TCP_ADDR=172.17.0.2
WEBDB_PORT_5432_TCP_PORT=5432
WEBDB_PORT_5432_TCP_PROTO=tcp
WEBDB_NAME=/web2/webdb
WEBDB_ENV_PG_VERSION=9.3
HOME=/root

WEBDB开头的属性

2./etc/hosts
docker run -it --rm --name web3 --link dbdata:webdb training/webapp /bin/bash
cat /etc/hosts
127.0.0.1       localhost
::1     localhost ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
172.17.0.2      webdb 642ae88af027 dbdata
172.17.0.4      ff39a846bbfe

代理连接：
ambassador模式实现跨主机连接
redis-client->ambassador1->ambassador2->redis-server

redis-server
docker run -d --name redis crosbymmichael/redis

ambassador2
docker run -d --name redis crosbymmichael/redis

ambassador1
docker run -d --name redis_ambassador --expose 6379 -e REDIS_PORT_6379_TCP=tcp://192.168.1.53:6379 svendowideit/ambassador 

redis-client
docker run -it --rm --name redis --link redis_ambassador:redis


定制镜像需要制作运行脚本时,不能在脚本中包含 &！！！！否则导致镜像知道到该行时即退出

docker port ubuntu 3306 //查看3306 到主机的端口映射










