kubectl cluster-info

方法1:kubectl run my-nginx --image=nginx --replicas=2 --port=80

方法2:
cat << EOF >nginx.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: my-nginx
spec:
  replicas: 2
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx
        ports:
        - containerPort: 80
        resources:
          requests:
            cpu: 400m
EOF
kubectl create -f nginx.yaml --record

修改deployment：
ex1:
kubectl edit deployment/nginx-deployment

ex2:
sed -i "s/nginx:1.7.9/nginx:1.91/g" nginx.yaml
kubectl apply -f nginx.yaml

kubectl rollout history deployment/nginx-deployment (--revision=2)

版本回退:
kubectl rollout undo deployment/nginx-deployment
kubectl rollout undo deployment/nginx-deployment --to-revision=2

kubectl get po                          
# 查看目前所有的pod

kubectl get rs                          
# 查看目前所有的replica set

kubectl get deployment                  
# 查看目前所有的deployment

kubectl describe po my-nginx            
# 查看my-nginx pod的详细状态

kubectl describe rs my-nginx            
# 查看my-nginx replica set的详细状态

kubectl describe deployment my-nginx    
# 查看my-nginx deployment的详细状态

kubectl expose rc my-nginx --port=80 --type=LoadBalancer
#rc即Replication Controller，上一步骤中的命令其实会自动创建一个名为my-nginx的rc来确保pod的数量维持在2个。
#expose命令将会创建一个service，将本地（某个节点上）的一个随机端口关联到容器中的80端口。
#type指明这个svc将会起到一个负载均衡的作用，会将流量导入两个pod中。

kubectl get svc my-nginx

kubectl delete rc my-nginx
删除rc，即删除该rc控制的所有容器。

kubectl delete svc my-nginx
删除svc，即删除分配的虚拟IP

#如果使用delete pod ${podName}来删除是没有效果的，因为rc会马上启动另外一个pod来维持总数量为2。
#除了某些强制性的命令，如：kubectl run或者expose等，会隐式创建rc或者svc，k8s还允许通过配置文件的方式来创建这些操作对象。

kubectl delete deployment my-nginx








