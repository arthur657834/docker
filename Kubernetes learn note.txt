kubectl cluster-info

方法1:kubectl run my-nginx --image=nginx --replicas=2 --port=80
systemctl status  kube-controller-manager -l
错误:
Dec 12 15:20:24 k8s-master kube-controller-manager[3382]: E1212 15:20:24.787391    3382 replica_set.go:446] unable to create pods: pods "nginx-deployment-3646139205-" is forbidden: no API token found for service account default/default, retry after the token is automatically created and added to the service account

解决办法:
vi /etc/kubernetes/apiserver
# default admission control policies
#KUBE_ADMISSION_CONTROL="--admission-control=NamespaceLifecycle,NamespaceExists,LimitRanger,SecurityContextDeny,ServiceAccount,ResourceQuota"
KUBE_ADMISSION_CONTROL="--admission-control=NamespaceLifecycle,NamespaceExists,LimitRanger,SecurityContextDeny,ResourceQuota"

方法2:
cat << EOF >nginx.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: my-nginx
spec:
  replicas: 2
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx
        ports:
        - containerPort: 80
        resources:
          requests:
            cpu: 400m
EOF
kubectl create -f nginx.yaml --record

修改deployment：
ex1:
kubectl edit deployment/nginx-deployment

ex2:
sed -i "s/nginx:1.7.9/nginx:1.91/g" nginx.yaml
kubectl apply -f nginx.yaml

kubectl rollout history deployment/nginx-deployment (--revision=2)

版本回退:
kubectl rollout undo deployment/nginx-deployment
kubectl rollout undo deployment/nginx-deployment --to-revision=2

前面创建了nginx的部署对象，那么别人如何使用nginx这个服务呢？首先要确定的是，这个nginx服务，是给内部使用的，还是外部。如果是内部使用，那就可以不用设置服务的类型（默认为ClusterIP），否则，可以将服务类型设置为NodePort，通过node的端口暴露出来给外部使用；或者是LoadBalancer，由云服务商提供一个负载均衡直接挂在服务上。这里我们使用NodePort，暴露出30088端口给外部使用。如果不指定nodePort，那么kubernetes会随机生成一个。下面让我们来启动服务：

cat << EOF >nginx-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: nginx
  labels:
    app: nginx
spec:
  type: NodePort
  selector:
    app: nginx
  ports:
  - port: 80
    targetPort: 80
    nodePort: 30088
EOF

kubectl create -f nginx-svc.yaml

访问http://10.1.50.142:30088/

kubectl delete -f nginx-svc.yaml
kubectl delete -f nginx.yaml

一次性任务(job):
Job是包含着若干pod的一次性任务。它与Replication Controller和Replica Set最大的区别就是当容器正常停止后，不会再次重启以维持一定数量的pod提供服务。

cat << EOF >busybox.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: busybox
spec:
  template:
    metadata:
      name: busybox
    spec:
      containers:
      - name: busybox
        image: busybox:1.24.1
        command:
          - sleep
          - "30"
      restartPolicy: Never
EOF

kubectl create -f busybox.yaml
#30s之后，SUCCESSFUL从0变为1了，说明这个job已经顺利完成了

kubectl get pods --show-all
kubectl delete job busybox
kubectl delete -f busybox.yaml

#相关的pod也会一并被删除。不过容器仍然会留在运行过这个pod的node上。这可以通过设置kubelet的 --maximum-dead-containers 和 --maximum-dead-containers-per-container 参数来解决。

Daemon Sets:
有时候需要每个node上都运行一个pod，比如监控或是日志收集等。这时候使用Daemon Sets就非常方便。我们用一个tomcat容器来做例子：

cat << EOF >tomcat.yaml
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: tomcat-ds
spec:
  template:
    metadata:
      labels:
        app: tomcat
    spec:
      containers:
      - name: tomcat
        image: tomcat:8.0.30-jre8
        ports:
        - containerPort: 8080
EOF

kubectl create -f tomcat.yaml


kubectl get ds
kubectl get pods



kubectl get po                          
# 查看目前所有的pod

kubectl get rs                          
# 查看目前所有的replica set

kubectl get deployment                  
# 查看目前所有的deployment

kubectl describe po my-nginx            
# 查看my-nginx pod的详细状态

kubectl describe rs my-nginx            
# 查看my-nginx replica set的详细状态

kubectl describe deployment my-nginx    
# 查看my-nginx deployment的详细状态

kubectl expose rc my-nginx --port=80 --type=LoadBalancer
#rc即Replication Controller，上一步骤中的命令其实会自动创建一个名为my-nginx的rc来确保pod的数量维持在2个。
#expose命令将会创建一个service，将本地（某个节点上）的一个随机端口关联到容器中的80端口。
#type指明这个svc将会起到一个负载均衡的作用，会将流量导入两个pod中。

kubectl get svc my-nginx

kubectl delete rc my-nginx
删除rc，即删除该rc控制的所有容器。

kubectl delete svc my-nginx
删除svc，即删除分配的虚拟IP

#如果使用delete pod ${podName}来删除是没有效果的，因为rc会马上启动另外一个pod来维持总数量为2。
#除了某些强制性的命令，如：kubectl run或者expose等，会隐式创建rc或者svc，k8s还允许通过配置文件的方式来创建这些操作对象。

kubectl delete deployment my-nginx








